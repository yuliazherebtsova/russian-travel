Неполный бриф, неточный макет

Почти каждый слышал истории о шаровых молниях: как та влетела в форточку, проплыла мимо замерших родственников и друзей семьи и вылетела обратно в окно. Интересно, что приборы метеорологов ни одной шаровой молнии не фиксировали. Примерно так же обстоят дела с «идеальным брифом».
Полных брифов и макетов не бывает никогда. Всегда можно что-то улучшить: подготовить картинки в точности под размер, описать для каждого элемента и окна, какие для него задействованы анимации и ховеры, показать изменение вёрстки перед, во время и после брейкпоинта. Всё это займёт массу времени дизайнера, чтобы отобразить в макете, но можно уточнить за полчаса личного общения.
Без некоторых данных работа встаёт, сроки горят, проект не заканчивают в срок. Как с этим бороться? Постараться до старта работы задать все ключевые вопросы. Ниже мы подготовили список вопросов, которые часто нужно выяснить заранее.

Что нужно знать заранее
В каких браузерах проект должен работать? От этого зависят технологии, которыми вы сможете пользоваться.

На каких устройствах и экранах проект должен работать? Чаще всего это мобильные телефоны, планшеты и десктоп.

Как должна вести себя вёрстка в пограничных значениях: очень большой десктоп, очень маленький мобильный?

Что происходит с вёрсткой в промежутках между «брейкпоинтами» — точками, где вёрстка «переламывается», и вступают в силу правила для другого разрешения экрана.

Нужна ли заказчику админка — панель управления контентом сайта, доступная для владельца и модераторов?
Если нужна, скорее всего, понадобится отдельный бэкенд-разработчик, который будет её делать. Это значительно увеличивает стоимость проекта. Если заказчику админка не нужна, значит разработка будет дешевле и проще.

Если вы берёте проект на фриланс, обязательно договоритесь с заказчиком, сколько этапов правок вы будете делать. Без ограничений правки не закончатся никогда. Либо определите дополнительные условия работы над правками. Например, с почасовой или сдельной ставкой.

Чего часто может не хватать в макете или брифе
Объяснения, как и где работают анимации и ховеры — эффекты при наведении на ссылку или картинку. Это касается кнопок, выезжающих меню, попапов и ссылок.

Файлов со шрифтами. Также полезно проверить лицензию на их использование. Для этого просто вбейте в гугле слово typeface и название шрифта, и посмотрите по первым результатам в выдаче на раздел «License Information». Если лицензия не открытая (например, Commercial Licenses), то стоит задать этот вопрос дизайнеру.

Текстов и картинок. Убедитесь, что у вас есть тексты и картинки, которые участвуют в вёрстке.
Это минимальный набор того, что следует проверить после изучения макета и брифа. С опытом вы научитесь это делать самостоятельно и быстро.


=======
Минимальные и максимальные значения размеров
Свойства min-width, min-height, max-width и max-height — очень серьёзный инструмент «резиновой» вёрстки.

Вот несколько вопросов, которые нужно обсудить с дизайнером, прежде чем приступать к вёрстке макета:

1. Насколько будет сжиматься вся страница? В смысле, до какого предела сжатия окна браузера элементы будут у
меньшаться пропорционально в ширину. После достижения этого предела элементы могут либо перестать сжиматься
(и появится скролл) либо радикально изменить своё положение/поведение. В этом случае используют min-width.

2. До какого предела могут расширяться страница или области контента? Есть много вариантов поведения.
Обычно «резиновая» вёрстка предусматривает максимальную ширину, свыше которой элементы перестают растягиваться,
а по бокам появляются поля (на веб-дизайнерском жаргоне — «уши»). Например, посмотрите, как ведёт себя страница
сайта Нобелевской премии — в шапке и в основной зоне контента на широких мониторах. Если изображение
Альфреда Нобеля тянется бесконечно, то зона контента на определённой ширине растягиваться перестаёт.
Подобное поведение обеспечивается свойством max-width в сочетании с горизонтальным выравниванием через margin: auto;

3. Как должны менять свой размер текстовые блоки? Помните, что высота текстовых элементов может меняться
при сжатии браузера или увеличении объёма текста. С одной стороны это значит, что самим текстовым элементам нужно
задавать минимальную высоту вместо фиксированной, а с другой — родительские элементы тоже должны растягиваться
при увеличении высоты контента. Вспоминайте это правило каждый раз, когда пишете свойство height, и задумывайтесь,
не лучше ли использовать min-height.

4. Как элементы будут смотреться на очень больших экранах? Там размеры могут оказаться слишком велики.
Например, вы задали основной картинке статьи min-height: 80vh;. На большом экране или проекторе изображение
станет гигантским, а вам это не подходит. Не стесняйтесь в нужном месте использовать max-height.

======

Подходы к построению медиазапросов

Обычно медиазапросов пишут много, чтобы определить поведение элементов для большинства современных устройств. Их много и появляются всё новые, поэтому нельзя написать универсальный набор медиазапросов для каждого существующего устройства.
Их сортируют по ширине и относят к одной из групп:

маленькие смартфоны,
широкие смартфоны,
планшеты,
малые настольные компьютеры и ноутбуки,
средние настольные компьютеры и ноутбуки,
большие мониторы,
очень большие мониторы.

/* Основной код для разрешения 1024px */
@media screen and (min-width: 2560px) {
    /* стили для больших мониторов с разрешением 4K */
}
@media screen and (min-width: 1440px) {
    /* стили для больших настольных компьютеров и ноутбуков */
}
@media screen and (max-width: 1024px) {
    /* стили для планшета в альбомной ориентации */
}
@media screen and (max-width: 768px) {
    /* стили для планшета */
}
@media screen and (max-width: 425px) {
    /* стили для широкого смартфона */
}
@media screen and (max-width: 375px) {
    /* стили для среднего смартфона */
}
@media screen and (max-width: 320px) {
    /* стили для малого смартфона */
}

Помните, что условия ограничения ширины можно комбинировать с другими:
@media screen and (max-width: 320px) {
    /* стили для мониторов с максимальной шириной 320 пикселей */
}

@media all and (max-width: 320px) {
    /* стили для любых типов устройств с максимальной шириной 320 пикселей */
}

Есть важное правило, которое нужно соблюдать при написании медиазапросов:

пишите стили от более общего к более частному, от большего к меньшему,
это обезопасит вас от ситуаций, когда одни стили перебивают другие.

Другой интересный момент — вёрстка макетов под ландшафтную ориентацию устройств.
В списке условий, применимых к медиазапросам, есть orientation со значениями portrait (англ. «портретная») и
landscape (англ. «ландшафтная»). На деле поддержка браузерами этого свойства оставляет желать лучшего.
Поэтому приходится комбинировать условия минимальных ширины и высоты.

Вот например, условие, которое описывает горизонтальный смартфон модели iPhone 5:

@media screen and (max-width: 568px) and (max-height: 320px) {
    /* стили для iphone 5 */
}
